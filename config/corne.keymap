/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    combos {
        compatible = "zmk,combos";

        combo_f12 {
            bindings = <&kp F12>;
            key-positions = <34 35>;
            timeout-ms = <50>;
            layers = <2>;
        };

        combo_left_bracket_and_curly {
            bindings = <&mt RA(LBKT) RA(APOSTROPHE)>;
            key-positions = <19 20>;
            timeout-ms = <50>;
        };

        combo_right_bracket_and_curly {
            bindings = <&mt RA(RBKT) RA(BACKSLASH)>;
            key-positions = <21 20>;
            timeout-ms = <50>;
        };

        combo_delete {
            bindings = <&kp DEL>;
            key-positions = <10 11>;
            timeout-ms = <50>;
        };

        combo_left_paren {
            bindings = <&kp LS(N8)>;
            key-positions = <7 8>;
            timeout-ms = <50>;
        };

        combo_right_paren {
            bindings = <&kp LS(N9)>;
            key-positions = <9 8>;
            timeout-ms = <50>;
        };

        combo_layer_controls {
            bindings = <&mo 3>;
            key-positions = <37 40>;
            timeout-ms = <50>;
        };

        combo_hyphen_and_underscore {
            bindings = <&mt QUESTION SLASH>;
            key-positions = <18 19>;
            timeout-ms = <50>;
        };

        combo_equal_and_plus {
            bindings = <&mt LS(NUMBER_0) RIGHT_BRACKET>;
            key-positions = <6 7>;
            timeout-ms = <50>;
        };

        combo_home {
            bindings = <&kp HOME>;
            key-positions = <22 23>;
            timeout-ms = <50>;
        };

        combo_end {
            bindings = <&kp END>;
            key-positions = <35 34>;
            timeout-ms = <50>;
        };

        combo_page_down {
            bindings = <&kp PAGE_DOWN>;
            key-positions = <28 29>;
            timeout-ms = <50>;
        };

        combo_page_up {
            bindings = <&kp PAGE_UP>;
            key-positions = <17 16>;
            timeout-ms = <50>;
        };

        combo_insert {
            bindings = <&kp INSERT>;
            key-positions = <15 16>;
            timeout-ms = <50>;
        };

        combo_pause {
            bindings = <&kp PAUSE_BREAK>;
            key-positions = <28 27>;
            timeout-ms = <50>;
        };

        combo_esc {
            bindings = <&kp ESCAPE>;
            key-positions = <0 1>;
            timeout-ms = <50>;
        };

        combo_semicolon_and_colon {
            bindings = <&mt GREATER_THAN LESS_THAN>;
            key-positions = <10 9>;
            timeout-ms = <50>;
        };

        combo_exclamation_and_bar {
            bindings = <&mt RA(NUMBER_1) LS(NUMBER_1)>;
            key-positions = <1 2>;
            timeout-ms = <50>;
        };

        combo_at_symbol {
            bindings = <&kp RA(NUMBER_2)>;
            key-positions = <2 3>;
        };

        combo_sharp_and_double_quotes {
            bindings = <&mt LS(NUMBER_3) RA(NUMBER_3)>;
            key-positions = <3 4>;
            timeout-ms = <50>;
        };

        combo_dollar_and_tilde {
            bindings = <&mt RA(NUMBER_4) LS(NUMBER_4)>;
            key-positions = <5 4>;
            timeout-ms = <50>;
        };

        combo_ptrint_screen {
            bindings = <&kp PRINTSCREEN>;
            key-positions = <11 23>;
            timeout-ms = <50>;
        };

        combo_percent_ampersand {
            bindings = <&mt LS(NUMBER_6) LS(NUMBER_5)>;
            key-positions = <30 31>;
            timeout-ms = <50>;
        };

        combo_questionmarks {
            bindings = <&mt LS(UNDERSCORE) LS(EQUAL)>;
            key-positions = <13 14>;
            timeout-ms = <50>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp TAB           &kp Q           &kp W  &kp E         &kp R  &kp T        &kp Y    &kp U  &kp I      &kp O    &kp P          &kp BSPC
&kp LEFT_SHIFT    &kp A           &kp S  &kp D         &kp F  &kp G        &kp H    &kp J  &kp K      &kp L    &kp SEMICOLON  &kp APOS
&kp LEFT_CONTROL  &mt LEFT_WIN Z  &kp X  &kp C         &kp V  &kp B        &kp N    &kp M  &kp COMMA  &kp DOT  &kp FSLH       &kp ESCAPE
                                         &kp LEFT_ALT  &mo 1  &kp SPACE    &kp RET  &mo 2  &kp RALT
            >;
        };

        symbols {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&trans            &kp LS(NUMBER_1)  &kp LS(NUMBER_2)  &kp LS(NUMBER_3)  &kp LS(NUMBER_4)  &kp LS(NUMBER_5)    &kp LEFT_BRACE  &kp CARET          &kp RIGHT_BRACE  &kp LS(NUMBER_8)  &kp LS(NUMBER_9)  &kp BSPC
&kp LEFT_SHIFT    &trans            &trans            &trans            &trans            &kp PLUS            &kp SLASH       &kp LS(NUMBER_0)   &kp LBKT         &kp RBKT          &kp TILDE         &mt PRINTSCREEN GRAVE
&kp LEFT_CONTROL  &kp LT            &kp GREATER_THAN  &trans            &trans            &trans              &kp QUESTION    &kp RIGHT_BRACKET  &kp APOSTROPHE   &kp BACKSLASH     &kp BACKSLASH     &kp LS(NUMBER_4)
                                                      &trans            &trans            &trans              &trans          &trans             &trans
            >;
        };

        numbers_and_func {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&trans  &kp N1  &kp N2  &kp N3  &kp N4  &kp N5    &kp N6          &kp N7          &kp N8        &kp N9           &kp N0   &trans
&trans  &trans  &trans  &trans  &trans  &trans    &kp LEFT_ARROW  &kp DOWN_ARROW  &kp UP_ARROW  &kp RIGHT_ARROW  &trans   &trans
&trans  &kp F1  &kp F2  &kp F3  &kp F4  &kp F5    &kp F6          &kp F7          &kp F8        &kp F9           &kp F10  &kp F11
                        &trans  &trans  &trans    &trans          &trans          &trans
            >;
        };

        controls {
            bindings = <
&trans  &trans        &trans          &trans        &trans        &trans          &trans  &trans  &trans  &trans  &trans  &kp C_VOLUME_UP
&trans  &bt BT_SEL 0  &bt BT_SEL 1    &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &trans  &trans  &trans  &trans  &trans  &kp C_PLAY_PAUSE
&trans  &bt BT_CLR    &bt BT_CLR_ALL  &trans        &trans        &trans          &trans  &trans  &trans  &trans  &trans  &kp C_VOLUME_DOWN
                                      &trans        &trans        &trans          &trans  &trans  &trans
            >;
        };
    };
};
